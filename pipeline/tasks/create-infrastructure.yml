platform: linux
image_resource:
  type: registry-image
  source:
    repository: hashicorp/terraform
inputs:
- name: deployments
- name: paving
outputs:
- name: deployments
caches:
- path: .terraform.d
run:
  path: sh
  args:
  - -c
  - |
    set -eux

    export TF_PLUGIN_CACHE_DIR=$PWD/.terraform.d/plugin-cache

    terraform_path="$PWD"/paving/"$IAAS"
    deployment_path="$PWD"/deployments/"$DEPLOYMENT_NAME"

    if [ ! -d "$terraform_path" ]; then
      echo "Please provide a valid IAAS, the '$IAAS' is not supported"
      exit 1
    fi

    if [ ! -d "$deployment_path" ]; then
      echo "Please provide a valid DEPLOYMENT_NAME, the '$DEPLOYMENT_NAME' is not supported"
      exit 1
    fi

    commit() {
      cp "$terraform_path"/terraform.tfstate "$deployment_path"
      cd "$deployment_path"
        git config --global user.name "pipeline-bot"
        git config --global user.email "pipeline-bot@example.com"
        git add terraform.tfstate

        if [ -e "$terraform_path"/terraform-vars.yml ]; then
          cp "$terraform_path"/terraform-vars.yml "$deployment_path"
          git add terraform-vars.yml
        fi

        git commit -m "updated terraform state for $DEPLOYMENT_NAME" || true
    }

    trap commit EXIT

    cp "$deployment_path"/terraform.tfstate "$terraform_path" || true # not required on first try
    cp "$deployment_path"/terraform.tfvars "$terraform_path"

    cd "$terraform_path"

    terraform init

    terraform refresh \
      -state terraform.tfstate \
      -var-file terraform.tfvars

    terraform plan \
      -state terraform.tfstate \
      -out terraform.tfplan \
      -var-file terraform.tfvars

    terraform apply \
      -state-out terraform.tfstate \
      -parallelism=5 \
      terraform.tfplan

    terraform output stable_config_opsmanager > terraform-vars.yml
